---
alwaysApply: true
---

# Manual QA Framework - Cursor Rules

## ‚ö†Ô∏è CRITICAL: TASK TRACKING SEPARATION ‚ö†Ô∏è
**IMMEDIATELY READ THIS BEFORE MAKING ANY CHANGES:**
- **NEVER** add current tasks, project status, or work items to this file
- **ALWAYS** use `.cursor/rules/task_tracking.mdc` for current work and tasks
- **THIS FILE**: Framework rules and guidelines only (version controlled)
- **TASK FILE**: Current project work and status only (local, gitignored)
- **NEW PROJECT**: Copy `task_tracking_template.mdc` to `task_tracking.mdc` and customize


## Project Overview
**Title**: Manual QA Framework  
**Purpose**: Internal company framework for standardized manual QA processes  
**Status**: Active Development  

## Framework Overview
- **Manual QA Framework**: Comprehensive testing framework for internal company use
- **JIRA Integration**: Full integration with company JIRA for bug tracking and test management
- **Standardized Processes**: Consistent bug reporting, test planning, and documentation
- **Project-Specific Testing**: Dedicated testing for specific projects like OES (Ownership Entity System)
- **Cross-Platform Support**: Both PowerShell (Windows) and Bash (Mac/Linux) implementations

## Task Management - CRITICAL SEPARATION RULES
- **FORBIDDEN**: Never add current tasks, project status, or work-in-progress items to this file
- **Current Tasks**: ONLY use local `task_tracking.mdc` for current tasks and project status
- **Local Task Tracking**: `task_tracking.mdc` is gitignored and project-specific
- **Task Updates**: Always update `task_tracking.mdc` for task changes, NEVER this file
- **Version Control**: This file contains framework rules only, no current work status
- **New Project Setup**: When cloning framework, create new local `task_tracking.mdc` for that project

## Key Components
- **01-jira-integration**: JIRA API integration and field configurations
- **02-bug-reports**: Standardized bug report templates and examples
- **03-test-plans**: Test plan templates and examples
- **04-projects**: Project-specific testing documentation and rules
- **05-utilities**: Helper tools and traceability matrices
- **06-documentation**: Framework guides and standards

## CRITICAL RULES - NEVER FORGET
- **NEVER DELETE EXISTING DOCUMENTATION**: Always preserve all existing content
- **ALWAYS ADD NEW INFORMATION ON TOP**: Place new sections, fields, or information at the beginning of documents
- **PRESERVE COMPLETE HISTORY**: Maintain all existing examples, references, and detailed information
- **APPEND, DON'T REPLACE**: When updating documentation, add new sections rather than replacing existing ones
- **MAINTAIN BACKWARDS COMPATIBILITY**: Keep all existing field references, examples, and formats

## LOCAL TASK TRACKING RULES - MANDATORY ENFORCEMENT
- **STRICT SEPARATION**: cursor_rules.mdc = framework rules, task_tracking.mdc = current work
- **GITIGNORE ENFORCEMENT**: task_tracking.mdc MUST be gitignored (local only)
- **NO CURRENT TASKS IN FRAMEWORK**: This file contains zero current task information
- **PROJECT-SPECIFIC TASKS**: Each project clone gets its own task_tracking.mdc
- **AUTO-GENERATION**: When framework is cloned, automatically create local task_tracking.mdc
- **TASK UPDATES ONLY**: Use task_tracking.mdc for all current work, status updates, and progress
- **FRAMEWORK UPDATES**: Only update cursor_rules.mdc for framework improvements, never current tasks

## NEW PROJECT SETUP INSTRUCTIONS
When this framework is cloned to a new project:
1. **Automatically create** a local `task_tracking.mdc` file for project-specific tasks
2. **Never modify** this cursor_rules.mdc file with current project tasks  
3. **Use template**: Copy `.cursor/rules/task_tracking_template.mdc` to `.cursor/rules/task_tracking.mdc`
4. **Customize template**: Update project name, tasks, and status in the new local file
5. **Local tracking only**: All current work stays in the local task_tracking.mdc
6. **Framework updates**: Only update cursor_rules.mdc for framework improvements, never tasks

## AUTOMATED SETUP COMMAND
For new projects, run this setup command:
```bash
# Copy template to create local task tracking
cp .cursor/rules/task_tracking_template.mdc .cursor/rules/task_tracking.mdc
# Edit the new file to add your project details
```

## TASK TRACKING ENFORCEMENT
- **FORBIDDEN IN THIS FILE**: Current tasks, project status, work-in-progress items
- **REQUIRED LOCATION**: All current work must go in local `task_tracking.mdc`
- **TEMPLATE AVAILABLE**: Use `task_tracking_template.mdc` for new project setup  
- **VERSION CONTROL**: task_tracking.mdc is gitignored (local only)
- **AUTOMATION**: When framework is used, automatically create local task tracking from template

## FILE CREATION RULES
- **FOCUS ON ADDING, NOT REMOVING**: Mostly focus on adding content, not taking away existing information
- **ONLY REMOVE IF DUPLICATED/OUTDATED**: Only remove content if it's clearly duplicated or outdated, otherwise preserve it
- **CRITICAL**: CURSOR SHOULD NOT GENERATE ANY NEW FILES IF NOT ABSOLUTELY NECESSARY
- **ALWAYS READ EXISTING DOCUMENTATION FIRST** before creating anything new
- **Check existing files** for similar functionality before creating duplicates
- **Update existing files** instead of creating new ones when possible
- **Only create new files** when there's a clear, unique need that cannot be addressed by updating existing files

## PROJECT FOLDER RULES - ENFORCE STRICTLY
- **ONLY DOCUMENTATION FOLDER CAN BE PUSHED**: In project folders (04-projects/*), only the documentation folder can be committed to git
- **ALL OTHER PROJECT FILES ARE GITIGNORED**: Test files, bug reports, test results, screenshots, etc. are excluded from version control
- **DOCUMENTATION FOLDER RESTRICTIONS**: Documentation folder can ONLY contain project documentation, NOT testing files
- **FINAL TESTING SUMMARY**: When testing is complete, create ONE .md file with aggregated data (bugs, test cases, test results)
- **NO INDIVIDUAL TESTING FILES**: Individual bug reports, test cases, or test results should NOT be in documentation folder
- **PROJECT DOCUMENTATION ONLY**: Documentation folder should contain project rules, requirements, specifications, and final summary

## Repository Setup Plan
- ‚úÖ Company GitHub repository: https://github.com/compstak/QA-Manual-Framework
- ‚úÖ Pushed initial framework to company repository
- ‚úÖ Created develop branch for active development
- ‚úÖ Added comprehensive branching strategy to README
- ‚úÖ Streamlined README for better readability
- ‚úÖ Added comprehensive command documentation to README
- ‚úÖ Successfully integrated with company repository
- ‚úÖ Set up maintainer collaboration (Pavle + Ogi)
- üîÑ **PENDING**: Set up GitHub branch protection rules for main and develop branches

## OES Documentation Task
- ‚úÖ Retrieved OES System Documentation from Atlassian Confluence
- ‚úÖ Created comprehensive documentation under 04-projects/ownership-entity/
- ‚úÖ Reorganized project structure for better scalability
- ‚úÖ Updated framework documentation to reflect new structure

## Framework Organization
- ‚úÖ Refactored all "Testing Cup" references to "Manual QA Framework"
- ‚úÖ Updated framework structure for better organization
- ‚úÖ Moved OES documentation to 04-projects/ownership-entity/
- ‚úÖ Updated README and organization plan documentation

## JIRA Field Discovery
- ‚úÖ Retrieved all JIRA fields via API
- ‚úÖ Identified QA Assignee fields: customfield_11207 (single), customfield_11313/11308 (multi)
- ‚úÖ Found standard user fields: assignee, reporter, creator
- ‚úÖ Discovered additional assignee fields: Data Assignee, Research Assignee
- ‚úÖ Added new field information while preserving existing documentation

## Show My Tickets Command - Cross-Platform Testing
- ‚úÖ Successfully executed PowerShell version (show_my_tickets.ps1)
- ‚úÖ Found 26 tickets assigned to user as QA Assignee (customfield_11207)
- ‚úÖ Fixed PowerShell syntax issues (ampersand escaping, special characters)
- ‚úÖ Improved table formatting for better readability
- ‚úÖ Successfully tested shell script version (show_my_tickets.sh)
- ‚úÖ Confirmed API connectivity and authentication working
- ‚úÖ Fixed JQL encoding issues in shell script
- ‚úÖ Identified platform-specific differences in query results
- ‚úÖ Both scripts now functional with proper error handling

## Cross-Platform Compatibility Findings
- **PowerShell (.ps1)**: Works perfectly on Windows, finds 26 QA Assignee tickets
- **Bash (.sh)**: Works on Mac/Linux, API connectivity confirmed, but JQL query differences
- **Authentication**: Both scripts successfully authenticate with JIRA API
- **Error Handling**: Both scripts handle errors gracefully
- **Table Formatting**: Simplified formatting for better cross-platform compatibility
- **Special Characters**: Removed problematic Unicode characters for better compatibility

## Documentation Update Task
- ‚úÖ Updated README.md with available commands section
- ‚úÖ Added command-specific documentation and usage examples
- ‚úÖ Created clear cross-platform usage instructions
- ‚úÖ Added troubleshooting and FAQ sections
- ‚úÖ Included upcoming commands roadmap

## Repository Updates
- ‚úÖ Committed all changes with comprehensive commit message
- ‚úÖ Pushed changes to main branch successfully
- ‚úÖ Added 4 files: 322 insertions, 107 deletions
- ‚úÖ Created cross-platform command scripts (.ps1 and .sh)
- ‚úÖ Updated README.md with command documentation



## Cross-Platform JIRA Commands - COMPLETED
- ‚úÖ Fixed Bash script authentication issues (was using wrong auth method)
- ‚úÖ Both PowerShell and Bash versions working perfectly
- ‚úÖ Technical detection working on both platforms
- ‚úÖ User authentication and JIRA API calls working correctly
- ‚úÖ Cross-platform ticket creation and commenting fully functional
- ‚úÖ Updated all scripts to use project root .env file location (standardized)

## BUG CREATION RULES - MANDATORY COMPLIANCE
**CRITICAL**: EVERY bug ticket MUST be validated against bug_metrics_reference.md BEFORE publishing.

### PRE-PUBLISHING VALIDATION CHECKLIST (MANDATORY)
BEFORE creating ANY ticket, verify compliance with bug_metrics_reference.md:

1. **Pre-Reporting Quality Checklist**:
   - ‚úÖ Bug reproduced 2-3 times
   - ‚úÖ Checked Tech bug board for duplicates using keywords  
   - ‚úÖ Verified if same issue exists in related modules
   - ‚úÖ Written detailed reproduction steps
   - ‚úÖ Attached videos, screenshots, logs
   - ‚úÖ All mandatory fields completed

2. **Summary Format**: "[QA Manual Framework Testing] [Feature/Functionality Name] Title"

3. **Mandatory JIRA Fields**:
   - Project: "All Tech Projects (AP)"
   - Issue Type: "Bug (t)" (ID: 1)
   - Environment: Highest affected (dev ‚Üí stage ‚Üí prod)
   - User: Credentials with Vault link

4. **Required Sections** (ALL MANDATORY):
   - Description
   - Preconditions (setup requirements, user access, data state)
   - Steps to Reproduce (start with "Login as [user type] for example")
   - Expected Result (specific outcomes)
   - Actual Result (what actually happens)
   - Additional Information (environment, browser, errors, related tickets)

5. **Visual Proof Requirements**:
   - Screenshots with page URL visible
   - Developer console open with JavaScript errors
   - System information (OS version, browser version)
   - Videos/logs when applicable

6. **Severity Classification**: Use P0/P1/P2/P3/P4/5MF (NOT "Major/Minor")
   - P0: Site Outage
   - P1: Trust/Data Issues & Data Feed/API issues
   - P2: Broken Functionality With No Work Around
   - P3: Broken Functionality With Work Around
   - P4: Usability Concerns
   - 5MF: Five Minute Fix

### TECHNICAL BUG REPORTS - ENHANCED REQUIREMENTS
When user provides detailed technical information:
- Include all standard sections PLUS technical evidence
- Add ES document structures, API responses in code blocks
- Include environment comparison analysis
- Add root cause analysis section
- Use proper ADF formatting with headings and structured content

### VALIDATION PROCESS
1. Generate ticket content
2. CHECK against bug_metrics_reference.md compliance
3. Identify missing sections
4. ADD missing mandatory sections
5. VERIFY all checklist items
6. Only THEN publish ticket

**CRITICAL**: NO ticket should be published without full bug_metrics_reference.md compliance verification.

## Next Steps
1. Complete bug documentation alignment with company standards
2. Continue developing additional JIRA commands (show-ticket, update-status, add-comment)
3. Implement bug report generation commands
4. Add test plan generation functionality
5. Continue with framework development as needed