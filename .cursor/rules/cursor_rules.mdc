---
description: 
globs: 
alwaysApply: false
---
# Project: Ownership Entity Testing & Kafka Events

## Current Task
Testing ownership entity functionality including:
- New attribute fields for entities (Blackstone, Prologis, Simon Property Group, etc.)
- Automatic Kafka event creation 
- Manual API endpoints for testing
- Data synchronization between Neo4J, Kafka, and Elasticsearch

## Key Components

### New Attribute Fields
- **Entity Name**: String (Blackstone, Prologis, Simon Property Group)
- **Ticker/Exchange**: Array of objects with ticker, exchange, country
- **Country of Ownership**: String single select (US, Singapore, UAE)
- **Capital Type**: String single select (Pension Fund, Sovereign Wealth, Private Equity, Public REIT, Private REIT)
- **Owner Types**: Array (Investor, Operator, Occupier)
- **Website**: String URL
- **Primary Asset Classes**: Array max 3 (Office, Retail, Industrial, Specialty, Diversified)
- **Investment Strategy Primary**: String single select (Core, Core Plus, Value-Add, Opportunistic, Multi-Strategy)
- **Investment Strategy Also Invests In**: Array max 2 (Core, Core Plus, Value-Add, Opportunistic)
- **Additional fields**: name, display name, hidden, hidden reason

### Infrastructure
- **Kafka Topic**: "ownership-entity.owners" (all environments)
- **Elasticsearch Index**: "owner-v020" (all environments)
- **API Base**: https://ownership-entity-service.dev.cs-int-592.com/docs/swagger/

### API Endpoints to Test
- POST /knowledge-graph/owners/import
- POST /kafka/owners/publish  
- POST /elastic/owners/refresh
- POST /owners/search

### Database Tables
- kg_owners (imported from Neo4J)
- kg_owner_import_results (import statistics)
- kafka_owners_publish_export_results (manual publishing results)
- elastic_owners_refresh_export_results (manual indexing results)

### Kafka Events
- OwnerUpserted events (automatic and manual)
- OwnerDeleted events
- Event structure includes full owner data with all new attributes

### Data Sources
- **Neo4J**: ~10M owners, max ID ~340M
- **Source Query**: Complex MATCH query handling duplicates and parent relationships

## Testing Objectives
1. Test automatic Kafka event creation
2. Test manual API endpoints for event creation
3. Verify data flow: Neo4J → Kafka → Elasticsearch
4. Validate all new attribute fields are properly handled
5. Confirm event structure matches specification

## Current Status
✅ **JIRA MCP Integration**: Successfully configured and tested
✅ **Bug Report Created**: AP-20715 for Stage Enterprise buyer/seller field issue

**OES Testing Discovery**: Important edge case with deleted owners:
- /landlords/find-or-create endpoint behavior with deleted owners
- Natural deleted=1 owners can be un-deleted successfully
- Manually set deleted=1 owners cannot be un-deleted
- Root cause: OES data synchronization gap between MySQL and PostgreSQL

**Stage Environment Bug**: ✅ **RESOLVED AND REPORTED**
- **JIRA Ticket**: AP-20715 "[BE] Buyer/Seller Fields Missing from Enterprise Stage Sales Search Results"
- **Root Cause**: Stage Elasticsearch documents missing root-level buyer/seller fields
- **Technical Issue**: ES indexing pipeline missing field transformation step
- **Scope**: Stage only (Dev/Prod working correctly)

## Current Testing Issues
- Need to complete Step 2: Manual API endpoint testing for OES
- Continue ownership entity testing workflow
- Address ES indexing pipeline issue in Stage environment

## Architecture Discovery: OES Data Synchronization
- OES (Owner Entity Service) has local PostgreSQL copy of MySQL landlords
- /landlords/find-or-create checks LOCAL copy first (avoids MySQL calls)
- If name exists locally → return landlord IDs  
- If name doesn't exist locally → insert/un-delete in MySQL
- Manual MySQL changes don't sync to OES PostgreSQL automatically
- OES PostgreSQL uses `date_deleted` column vs MySQL `deleted` column
- "Natural" deletions work through proper sync flow
- "Manual" deletions only affect one system, breaking sync

## JIRA Integration Status
✅ **Successfully Configured**: JIRA MCP server with @timbreeding/jira-mcp-server
✅ **Field Mapping Created**: Comprehensive mapping for "All Tech Projects" (AP) + "Bug (t)" issue type
✅ **ADF Format Identified**: Atlassian Document Format required for descriptions/comments
✅ **Ticket Creation Tested**: Successfully created and updated JIRA tickets via API


















