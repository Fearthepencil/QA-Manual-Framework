#!/bin/bash

# JIRA Configuration Discovery Script
# Purpose: Automatically discover JIRA projects, custom fields, and generate field reference
# Usage: ./discover_jira_config.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration from environment variables
ENV_FILE=".env"
if [ ! -f "$ENV_FILE" ]; then
    echo -e "${RED}Error: .env file not found in project root${NC}"
    echo "Please create .env file with JIRA credentials:"
    echo "JIRA_MCP_LOGIN=your.email@your-domain.com"
    echo "JIRA_MCP_TOKEN=your_api_token"
    exit 1
fi

# Load environment variables
export JIRA_MCP_LOGIN=$(grep '^JIRA_MCP_LOGIN=' "$ENV_FILE" | cut -d'=' -f2-)
export JIRA_MCP_TOKEN=$(grep '^JIRA_MCP_TOKEN=' "$ENV_FILE" | cut -d'=' -f2-)

# Validate credentials
if [ -z "$JIRA_MCP_LOGIN" ] || [ -z "$JIRA_MCP_TOKEN" ]; then
    echo -e "${RED}Error: JIRA credentials not found in .env file${NC}"
    exit 1
fi

# JIRA Configuration
JIRA_URL="https://your-domain.atlassian.net"
EMAIL="$JIRA_MCP_LOGIN"
API_TOKEN="$JIRA_MCP_TOKEN"

# Output file
OUTPUT_FILE="01-jira-integration/config/jira_field_reference.md"

echo -e "${BLUE}🔍 JIRA Configuration Discovery${NC}"
echo "=================================="
echo "JIRA URL: $JIRA_URL"
echo "User: $EMAIL"
echo "Output: $OUTPUT_FILE"
echo ""

# Function to make authenticated API calls
call_jira_api() {
    local endpoint="$1"
    local url="$JIRA_URL/rest/api/3/$endpoint"
    
    curl -s -u "$EMAIL:$API_TOKEN" "$url" 2>/dev/null
}

# Function to extract JSON values
get_json_value() {
    local json="$1"
    local path="$2"
    echo "$json" | grep -o "\"$path\":\"[^\"]*\"" | cut -d'"' -f4
}

# Function to extract JSON array values
get_json_array_values() {
    local json="$1"
    local path="$2"
    echo "$json" | grep -o "\"$path\":\"[^\"]*\"" | cut -d'"' -f4 | tr '\n' ' ' | sed 's/ $//'
}

echo -e "${YELLOW}📋 Discovering Projects...${NC}"
PROJECTS_RESPONSE=$(call_jira_api "project")
if [ $? -ne 0 ] || [ -z "$PROJECTS_RESPONSE" ]; then
    echo -e "${RED}Failed to fetch projects${NC}"
    exit 1
fi

# Extract project keys and names
PROJECT_KEYS=$(echo "$PROJECTS_RESPONSE" | grep -o '"key":"[^"]*"' | cut -d'"' -f4 | head -10)
PROJECT_NAMES=$(echo "$PROJECTS_RESPONSE" | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | head -10)

echo -e "${GREEN}✅ Found $(echo "$PROJECT_KEYS" | wc -w) projects${NC}"
echo "Sample projects: $(echo "$PROJECT_KEYS" | tr '\n' ' ' | sed 's/ $//')"

echo ""
echo -e "${YELLOW}🔧 Discovering Custom Fields...${NC}"
CUSTOM_FIELDS_RESPONSE=$(call_jira_api "field")
if [ $? -ne 0 ] || [ -z "$CUSTOM_FIELDS_RESPONSE" ]; then
    echo -e "${RED}Failed to fetch custom fields${NC}"
    exit 1
fi

# Extract custom field information
CUSTOM_FIELD_IDS=$(echo "$CUSTOM_FIELDS_RESPONSE" | grep -o '"id":"customfield_[^"]*"' | cut -d'"' -f4 | head -20)
CUSTOM_FIELD_NAMES=$(echo "$CUSTOM_FIELDS_RESPONSE" | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | head -20)

echo -e "${GREEN}✅ Found $(echo "$CUSTOM_FIELD_IDS" | wc -w) custom fields${NC}"

echo ""
echo -e "${YELLOW}📝 Generating Field Reference...${NC}"

# Generate the field reference markdown
cat > "$OUTPUT_FILE" << 'EOF'
# JIRA Field Reference - Auto-Generated

> **⚠️ IMPORTANT**: This file is auto-generated by the discovery script.
> Run `./discover_jira_config.sh` to update it with your current JIRA configuration.

## 🆕 Auto-Discovered Configuration

### Projects Available
EOF

# Add discovered projects
echo "$PROJECT_KEYS" | while read -r key; do
    if [ -n "$key" ]; then
        echo "- **$key** - [Project Name]" >> "$OUTPUT_FILE"
    fi
done

cat >> "$OUTPUT_FILE" << 'EOF'

### Custom Fields Available
EOF

# Add discovered custom fields
echo "$CUSTOM_FIELD_IDS" | while read -r field_id; do
    if [ -n "$field_id" ]; then
        echo "- **$field_id** - [Field Name]" >> "$OUTPUT_FILE"
    fi
done

cat >> "$OUTPUT_FILE" << 'EOF'

## 🎯 How to Use

### 1. Update Project Configuration
Replace `YOUR_PROJECT` in all scripts with one of your actual project keys:
EOF

# Add actual project keys as examples
echo "$PROJECT_KEYS" | head -3 | while read -r key; do
    if [ -n "$key" ]; then
        echo "- Use \`$key\` instead of \`YOUR_PROJECT\`" >> "$OUTPUT_FILE"
    fi
done

cat >> "$OUTPUT_FILE" << 'EOF'

### 2. Update Custom Field References
Replace the example custom field IDs with your actual field IDs:
EOF

# Add actual custom field IDs as examples
echo "$CUSTOM_FIELD_IDS" | head -5 | while read -r field_id; do
    if [ -n "$field_id" ]; then
        echo "- \`$field_id\` - Update scripts to use this field" >> "$OUTPUT_FILE"
    fi
done

cat >> "$OUTPUT_FILE" << 'EOF'

## 📋 Template Usage

### Project Configuration
```json
{
  "fields": {
    "project": {"key": "YOUR_ACTUAL_PROJECT_KEY"},
    "issuetype": {"id": "1"},
    "summary": "Your bug title"
  }
}
```

### Custom Field Usage
```json
{
  "fields": {
    "customfield_XXXXX": {"value": "Your Value"}
  }
}
```

## 🔄 Regeneration

To update this reference with your current JIRA configuration:

```bash
# Run discovery script
./discover_jira_config.sh

# Or PowerShell
powershell -File discover_jira_config.ps1
```

## 📚 Next Steps

1. **Review** the discovered projects and custom fields
2. **Update** your scripts with actual project keys
3. **Replace** custom field IDs in examples
4. **Test** with your actual JIRA instance
5. **Re-run** discovery when JIRA configuration changes

---

*Generated on: $(date)*
*JIRA URL: $JIRA_URL*
EOF

echo -e "${GREEN}✅ Field reference generated: $OUTPUT_FILE${NC}"
echo ""
echo -e "${BLUE}📋 Summary${NC}"
echo "=========="
echo "Projects discovered: $(echo "$PROJECT_KEYS" | wc -w)"
echo "Custom fields discovered: $(echo "$CUSTOM_FIELD_IDS" | wc -w)"
echo "Output file: $OUTPUT_FILE"
echo ""
echo -e "${YELLOW}💡 Next Steps:${NC}"
echo "1. Review the generated field reference"
echo "2. Update your scripts with actual project keys"
echo "3. Replace custom field IDs in examples"
echo "4. Test with your JIRA instance"
echo ""
echo -e "${GREEN}🎉 Discovery complete!${NC}"
