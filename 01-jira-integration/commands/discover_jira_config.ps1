# JIRA Configuration Discovery Script (PowerShell)
# Purpose: Automatically discover JIRA projects, custom fields, and generate field reference
# Usage: powershell -File discover_jira_config.ps1

param()

# Colors for output
$Red = "`e[31m"
$Green = "`e[32m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Reset = "`e[0m"

# Configuration from environment variables
$EnvFile = ".env"
if (-not (Test-Path $EnvFile)) {
    Write-Host "${Red}Error: .env file not found in project root${Reset}"
    Write-Host "Please create .env file with JIRA credentials:"
    Write-Host "JIRA_MCP_LOGIN=your.email@your-domain.com"
    Write-Host "JIRA_MCP_TOKEN=your_api_token"
    exit 1
}

# Load environment variables
$JiraLogin = $env:JIRA_MCP_LOGIN
$JiraToken = $env:JIRA_MCP_TOKEN

# Validate credentials
if (-not $JiraLogin -or -not $JiraToken) {
    Write-Host "${Red}Error: JIRA credentials not found in environment${Reset}"
    Write-Host "Please set JIRA_MCP_LOGIN and JIRA_MCP_TOKEN environment variables"
    exit 1
}

# JIRA Configuration
$JiraUrl = "https://your-domain.atlassian.net"
$Email = $JiraLogin
$ApiToken = $JiraToken

# Output file
$OutputFile = "01-jira-integration/config/jira_field_reference.md"

Write-Host "${Blue}🔍 JIRA Configuration Discovery${Reset}"
Write-Host "=================================="
Write-Host "JIRA URL: $JiraUrl"
Write-Host "User: $Email"
Write-Host "Output: $OutputFile"
Write-Host ""

# Function to make authenticated API calls
function Call-JiraApi {
    param($Endpoint)
    $Url = "$JiraUrl/rest/api/3/$Endpoint"
    $Base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $Email, $ApiToken)))
    $Headers = @{Authorization=("Basic {0}" -f $Base64AuthInfo)}
    
    try {
        $Response = Invoke-RestMethod -Uri $Url -Headers $Headers -Method Get
        return $Response
    }
    catch {
        Write-Host "${Red}API call failed: $($_.Exception.Message)${Reset}"
        return $null
    }
}

Write-Host "${Yellow}📋 Discovering Projects...${Reset}"
$ProjectsResponse = Call-JiraApi "project"
if (-not $ProjectsResponse) {
    Write-Host "${Red}Failed to fetch projects${Reset}"
    exit 1
}

# Extract project keys and names
$ProjectKeys = $ProjectsResponse | ForEach-Object { $_.key } | Select-Object -First 10
$ProjectNames = $ProjectsResponse | ForEach-Object { $_.name } | Select-Object -First 10

Write-Host "${Green}✅ Found $($ProjectKeys.Count) projects${Reset}"
Write-Host "Sample projects: $($ProjectKeys -join ', ')"

Write-Host ""
Write-Host "${Yellow}🔧 Discovering Custom Fields...${Reset}"
$CustomFieldsResponse = Call-JiraApi "field"
if (-not $CustomFieldsResponse) {
    Write-Host "${Red}Failed to fetch custom fields${Reset}"
    exit 1
}

# Extract custom field information
$CustomFieldIds = $CustomFieldsResponse | Where-Object { $_.id -like "customfield_*" } | ForEach-Object { $_.id } | Select-Object -First 20
$CustomFieldNames = $CustomFieldsResponse | Where-Object { $_.id -like "customfield_*" } | ForEach-Object { $_.name } | Select-Object -First 20

Write-Host "${Green}✅ Found $($CustomFieldIds.Count) custom fields${Reset}"

Write-Host ""
Write-Host "${Yellow}📝 Generating Field Reference...${Reset}"

# Generate the field reference markdown
$Content = @"
# JIRA Field Reference - Auto-Generated

> **⚠️ IMPORTANT**: This file is auto-generated by the discovery script.
> Run `./discover_jira_config.sh` to update it with your current JIRA configuration.

## 🆕 Auto-Discovered Configuration

### Projects Available
"@

# Add discovered projects
foreach ($Key in $ProjectKeys) {
    $Content += "`n- **$Key** - [Project Name]"
}

$Content += @"

### Custom Fields Available
"@

# Add discovered custom fields
foreach ($FieldId in $CustomFieldIds) {
    $Content += "`n- **$FieldId** - [Field Name]"
}

$Content += @"

## 🎯 How to Use

### 1. Update Project Configuration
Replace `YOUR_PROJECT` in all scripts with one of your actual project keys:
"@

# Add actual project keys as examples
foreach ($Key in ($ProjectKeys | Select-Object -First 3)) {
    $Content += "`n- Use ``$Key`` instead of ``YOUR_PROJECT``"
}

$Content += @"

### 2. Update Custom Field References
Replace the example custom field IDs with your actual field IDs:
"@

# Add actual custom field IDs as examples
foreach ($FieldId in ($CustomFieldIds | Select-Object -First 5)) {
    $Content += "`n- ``$FieldId`` - Update scripts to use this field"
}

$Content += @"

## 📋 Template Usage

### Project Configuration
```json
{
  "fields": {
    "project": {"key": "YOUR_ACTUAL_PROJECT_KEY"},
    "issuetype": {"id": "1"},
    "summary": "Your bug title"
  }
}
```

### Custom Field Usage
```json
{
  "fields": {
    "customfield_XXXXX": {"value": "Your Value"}
  }
}
```

## 🔄 Regeneration

To update this reference with your current JIRA configuration:

```bash
# Run discovery script
./discover_jira_config.sh

# Or PowerShell
powershell -File discover_jira_config.ps1
```

## 📚 Next Steps

1. **Review** the discovered projects and custom fields
2. **Update** your scripts with actual project keys
3. **Replace** custom field IDs in examples
4. **Test** with your actual JIRA instance
5. **Re-run** discovery when JIRA configuration changes

---

*Generated on: $(Get-Date)*
*JIRA URL: $JiraUrl*
"@

# Write content to file
$Content | Out-File -FilePath $OutputFile -Encoding UTF8

Write-Host "${Green}✅ Field reference generated: $OutputFile${Reset}"
Write-Host ""
Write-Host "${Blue}📋 Summary${Reset}"
Write-Host "=========="
Write-Host "Projects discovered: $($ProjectKeys.Count)"
Write-Host "Custom fields discovered: $($CustomFieldIds.Count)"
Write-Host "Output file: $OutputFile"
Write-Host ""
Write-Host "${Yellow}💡 Next Steps:${Reset}"
Write-Host "1. Review the generated field reference"
Write-Host "2. Update your scripts with actual project keys"
Write-Host "3. Replace custom field IDs in examples"
Write-Host "4. Test with your JIRA instance"
Write-Host ""
Write-Host "${Green}🎉 Discovery complete!${Reset}"
